" Variable
function! ToggleVerbose() "{
    if !&verbose
        set verbosefile=d:\verbose.log
        set verbose=15
    else
        set verbose=0
        set verbosefile=
    endif
endfunction "}
function! Tab_Or_Complete() "{
    if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
        return "\<C-N>"
    else
        return "\<Tab>"
    endif
endfunction "}
function! Layout_func() "{
    "set nowrap
    " set modeline
    " let g:molokai_original = 1
    " let g:rehash256 = 1
    "set wrap             "
    set mouse=a                 " Automatically enable mouse usage
    set mousehide               " Hide the mouse cursor while typing
    set number
    set	showcmd
    set	shiftwidth=4
    set softtabstop=4               " Let backspace delete indent
    set expandtab " change tab into space
    set	tabstop=4
    set	noeb ruler
    set	backspace=indent,eol,start
    set wildmenu                    " Show list instead of just completing
    set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
    if has('gui_running')
        "colors solarized
        colors molokai
    else
        colorscheme desert
    endif
      " let s:base03 = "NONE"
      " let s:base02 = "NONE"

    set t_Co=256          " 256 color mode
    set cursorline        " highlight current line
    set ruler             " show the cursor position all the time
    syntax on             " syntax highlight
    set hlsearch          " search highlighting
    set clipboard=unnamed " yank to the system register (*) by default
    set showmatch         " Cursor shows matching ) and
    set showmode          " Show current mode
    set wildchar=<TAB>    " start wild expansion in the command line using <TAB>
    set incsearch         " incremental search . Show result before finished typing
    set nobackup          " no *~ backup files
    "set backup
    set noswapfile
    set ignorecase        " ignore case when searching
    set nowritebackup
    set smartcase         " ignore case if search pattern is all lowercase,case-sensitive otherwise
    set smarttab          " insert tabs on the start of a line according to context
    " ignore these files while expanding wild chars
    language mes en
    set wildignore=*.o,*.class
    set autoindent " auto indent
    " disable sound on errors
    set noerrorbells
    set visualbell
    set t_vb=
    set tm=500
    set laststatus=2

        if has('persistent_undo')
            set undofile                " So is persistent undo ...
            set undolevels=1000         " Maximum number of changes that can be undone
            set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
        endif
    " These are files we are not likely to want to edit or read.
    set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
    syntax on
    set nocompatible
    set go= "guioptions
    "set go+=m
    " set guioptions-=m  "remove menu bar
    " set guioptions-=T  "remove toolbar
    " set guioptions-=r  "remove right-hand scroll bar
    " set guioptions-=L  "remove left-hand scroll bar
endfunction "}
function! Browser() "{
    let $PATH = $PATH . ';C:\Program Files (x86)\Google\Chrome\Application\'
    let line0 = getline (".")
    let line = matchstr (line0, "http[^ ]*")
    :if line==""
    let line = matchstr (line0, "ftp[^ ]*")
    :endif
    :if line==""
    let line = matchstr (line0, "file[^ ]*")
    :endif
    let line = escape (line, "#?&;|%")
    echo line
    exec ':silent !chrome.exe '. "\"" . line . "\""
endfunction "}
function! Autocmd_func() "{
    set autoread		" auto read when file is changed from outside
    " autocmd! bufwritepost .vimrc source ~/.vimrc " auto reload vimrc when editing it
    " autocmd BufEnter * silent! lcd %:p:h
    cmap cwd lcd %:p:h
    cmap cd. lcd %:p:h
    " autocmd BufEnter * set nowrap
endfunction "}
function! Map_func() "{
    cmap cd. lcd %:p:h " :cd. change working directory to that of the current file
    map <leader>w :call Browser ()<CR>
    nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>

    "Close all tabs
    map <leader>qa            : qa!<CR>
    "quick fix moving
    map <leader>n      : cn<CR>
    map <leader>p      : cp<CR>
    "move back and forward around tabs
    " nnoremap <silent> ,d :set operatorfunc=DeleteEmptyLines<CR>m"g@
    " map <leader>c :call CalWordCount()<cr>
    " nmap <Leader>db :g/^$/d<CR>

    imap ]] <ESC>:w<CR>
    nmap ]] <ESC>:w<CR>

    " inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
    map <leader>d I(Done). <ESC>0
    map <leader>og I(On-going). <ESC>0

    "inoremap <c-x><C-k> <c-k>
    "inoremap <C-k> <c-k><c-k>
    inoremap <leader><c-]> <c-x><c-]>

endfunction "}
function! Path_assign_func() "{
    set backupdir=$VIM\\BackUp
    set dir=$VIM\\BackUp
endfunction "}
function! Supertab_func() "{
    let g:SuperTabMappingForward="<s-tab>"
    let g:SuperTabMappingBackward="<tab>"
    let g:SuperTabDefaultCompletionType = "context"
    "let g:SuperTabContextDefaultCompletionType = "<c-x><c-p>"
    "let g:SuperTabDefaultCompletionType = â€˜<C-X><C-U>
endfunction "}
function! Complete_func() "{
    set completeopt=longest,menuone
    set thesaurus+=$VIM\word\test.txt
    set dictionary+=$VIM\word\wordsEn.txt
    set complete=w,s,k,.,b,t,]
endfunction   "}
"function! Nerdtree_func () "{
    map <leader>nt :NERDTreeFind<CR>
    map <leader>e :NERDTreeTabsToggle<CR>
    let g:NERDTreeWinPos    = "right"
    let NERDTreeHijackNetrw = 0
    let NERDTreeShowBookmarks=1
    let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
    let NERDTreeChDirMode=0
    let NERDTreeQuitOnOpen=1
    let NERDTreeMouseMode=2
    let NERDTreeShowHidden=1
    let NERDTreeKeepTreeInNewTab=1
    let g:nerdtree_tabs_open_on_gui_startup=0
    let g:NERDShutUp=1
"endfunction   "}
" Initialize NERDTree as needed {
function! NERDTreeInitAsNeeded()
    redir => bufoutput
    buffers!
    redir END
    let idx = stridx(bufoutput, "NERD_tree")
    if idx > -1
        NERDTreeMirror
        NERDTreeFind
        wincmd l
    endif
endfunction
" }
function! Ctrlp_func() "{
    noremap  <C-W><C-U> : CtrlPMRU <CR>
    " nnoremap  <C-W> u   : CtrlPMRU <CR>
    let g:ctrlp_custom_ignore         = '\.git$\|\.hg$\|\.svn$ \|.rvm$'
    let g:ctrlp_working_path_mode     = 0
    let g:ctrlp_match_window_bottom   = 1
    let g:ctrlp_max_height            = 15
    let g:ctrlp_match_window_reversed = 0
    let g:ctrlp_mruf_max              = 500
    let g:ctrlp_follow_symlinks       = 1
endfunction "}
function! View_init() "{
    autocmd BufWinLeave *.* mkview
    autocmd BufWinEnter *.* silent loadview
endfunction "}
function! DragCurrentLineFunc() "{
    noremap  <A-j> :m+<CR>
    noremap  <A-k> :m-2<CR>
    inoremap <A-j> <Esc>:m+<CR>
    inoremap <A-k> <Esc>:m-2<CR>
    vnoremap <A-j> :m'>+<CR>gv
endfunction "}
function! View_init_second() "{
    set viewoptions-=options
    augroup vimrc
        autocmd BufWritePost *
                    \   if expand('%') != '' && &buftype !~ 'nofile'
                    \|      mkview
                    \|  endif
        autocmd BufRead *
                    \   if expand('%') != '' && &buftype !~ 'nofile'
                    \|      silent loadview
                    \|  endif
    augroup END
endfunction "}
function! DiffFunc() "{
    set diffexpr=
    map <silent> <C-V><C-F> :browse vert diffsplit<CR>
    " find one file to compare
endfunction "}

function! AckFunc() "{
    nmap	<leader>g:noautocmd ack /<C-R>=expand("<cword>")<CR>/ *.*<CR>
    nnoremap <C-H>  :noautocmd vimgrep /<C-R>=expand("<cword>")<CR>/ $solution_source_path<CR>:copen
    " nnoremap <C-G>  :Ack <C-R>=expand("<cword>")<CR> 'D:\Code\DesignStudioNG\Source\' --type=csharp --type=cc --type=sql --type=vb
endfunction "}
function! NumberToggle()  "{
    if(&relativenumber == 1)
        set number
    else
        set relativenumber
    endif
endfunc "}
function! LayoutFunc() "{
    set guifont=Monaco:h10
    set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
    set splitright                  " Puts new vsplit windows to the right of the current
    set splitbelow                  " Puts new split windows to the bottom of the current
    set encoding=utf-8
    set fileencoding=utf-8
    " set fileencodings=big-5
    set guifontwide=NSimsun:h12
    :winpos 0 0
    set lines=22 columns=82
    au GUIEnter * simalt ~x
endfunction "}
function! CalWordCount() "{
    let l:cmd = []
    let l:cmd = add(l:cmd, '%s/')
    let l:cmd = add(l:cmd, '\(')
    let l:cmd = add(l:cmd, '[')
    let l:cmd = add(l:cmd, '\u3001-\u303f')
    let l:cmd = add(l:cmd, '\u3040-\u309f')
    let l:cmd = add(l:cmd, '\u30a0-\u30ff')
    let l:cmd = add(l:cmd, '\u3100-\u312f')
    let l:cmd = add(l:cmd, '\u31a0-\u31bf')
    let l:cmd = add(l:cmd, '\u4e00-\u4eff\u4f00-\u4fff\u5000-\u50ff\u5100-\u51ff\u5200-\u52ff\u5300-\u53ff\u5400-\u54ff\u5500-\u55ff\u5600-\u56ff\u5700-\u57ff\u5800-\u58ff\u5900-\u59ff\u5a00-\u5aff\u5b00-\u5bff\u5c00-\u5cff\u5d00-\u5dff\u5e00-\u5eff\u5f00-\u5fff\u6000-\u60ff\u6100-\u61ff\u6200-\u62ff\u6300-\u63ff\u6400-\u64ff\u6500-\u65ff\u6600-\u66ff\u6700-\u67ff\u6800-\u68ff\u6900-\u69ff\u6a00-\u6aff\u6b00-\u6bff\u6c00-\u6cff\u6d00-\u6dff\u6e00-\u6eff\u6f00-\u6fff\u7000-\u70ff\u7100-\u71ff\u7200-\u72ff\u7300-\u73ff\u7400-\u74ff\u7500-\u75ff\u7600-\u76ff\u7700-\u77ff\u7800-\u78ff\u7900-\u79ff\u7a00-\u7aff\u7b00-\u7bff\u7c00-\u7cff\u7d00-\u7dff\u7e00-\u7eff\u7f00-\u7fff\u8000-\u80ff\u8100-\u81ff\u8200-\u82ff\u8300-\u83ff\u8400-\u84ff\u8500-\u85ff\u8600-\u86ff\u8700-\u87ff\u8800-\u88ff\u8900-\u89ff\u8a00-\u8aff\u8b00-\u8bff\u8c00-\u8cff\u8d00-\u8dff\u8e00-\u8eff\u8f00-\u8fff\u9000-\u90ff\u9100-\u91ff\u9200-\u92ff\u9300-\u93ff\u9400-\u94ff\u9500-\u95ff\u9600-\u96ff\u9700-\u97ff\u9800-\u98ff\u9900-\u99ff\u9a00-\u9aff\u9b00-\u9bff\u9c00-\u9cff\u9d00-\u9dff\u9e00-\u9eff\u9f00-\u9fff')
    let l:cmd = add(l:cmd, '\ufe10-\ufe1f')
    let l:cmd = add(l:cmd, '\uff00-\uffef')
    let l:cmd = add(l:cmd, ']')
    let l:cmd = add(l:cmd, '\|')
    let l:cmd = add(l:cmd, '\<\w*\>')
    let l:cmd = add(l:cmd, '\)')
    let l:cmd = add(l:cmd, '/&/gn')
    exe join(l:cmd, '')
    map c :call CalWordCount()
endfunction "}
function! NetrwFunc() "{
    let g:netrw_liststyle=3
    let g:netrw_preview = 1 " use p to preview the file content
    nmap	qqe :Explore .<CR>
    " <cr>       Netrw will enter the directory or read the file
    " <del>      Netrw will attempt to remove the file/directory
    " D        Attempt to remove the file(s)/directory(ies)
    " o        Enter the file/directory under the cursor in a new  browser window.  A horizontal split is used.
    " O        Obtain a file specified by cursor
    " p        Preview the file
    " P        Browse in the previously used window
    " qf       Display information on file
    " R        Rename the designed file(s)/directory(ies)
    " t        Enter the file/directory under the cursor in a new tab
    " v        Enter the file/directory under the cursor in a new browser window.  A vertical split is used.
    " x        View file with an associated program
    " %        Open a new file in netrw's current directory
endfunction "}
function! GundoFunc() "{
    nnoremap <Leader>u :GundoToggle<CR>
endfunction "}
function! UltisnipsFunc() "{
    " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsJumpForwardTrigger="<c-b>"
    let g:UltiSnipsJumpBackwardTrigger="<c-z>"

    " If you want :UltiSnipsEdit to split your window.
    let g:UltiSnipsEditSplit="vertical"
endfunction "}
function! VimIndentGuide() "{
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_enable_on_vim_startup = 1
endfunction "}
function! NeosnippetFunc()"{
    " Plugin key-mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    "imap <expr><TAB>
    " \ pumvisible() ? "\<C-n>" :
    " \ neosnippet#expandable_or_jumpable() ?
    " \    "\<TAB>" : "\<Plug>(neosnippet_expand_or_jump)"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    " For conceal markers.
    if has('conceal')
      set conceallevel=2 concealcursor=niv
    endif

endfunction
"}

" execute functions
call NeosnippetFunc()
" call UltisnipsFunc()
" call ToggleVerbose()
call Vundle_func()
call NeoCompleteFunction()
call Airline_func()
call BinaryViewFunc()
"call TagbarFunc()
call DiffFunc()
call FontSizeSetting_func()
call Autocmd_func()
call Fold_func()
call Path_assign_func()
" call Supertab_func()
call Complete_func()
" call Nerdtree_func()
call View_init_second()
call Complete_test_func()
call TabularFunc()
call CommandLineFunc()
call Layout_func()
call Win_short_cut_func()
call Map_func()
call Ctrlp_func()
call AckFunc()
call LayoutFunc()
call GundoFunc()
call DragCurrentLineFunc()
call AddIndentFunc()
call NetrwFunc()
call VimIndentGuide()
set textwidth=300
autocmd BufEnter *.* set nowrap
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<

autocmd VimEnter * call AccentDemo()

    " Allow using the repeat operator with a visual selection (!)
    " http://stackoverflow.com/a/8064607/127816
"known key word
" try to know <SID>
" silent function : keep external commands from triggering the "Hit ENTER" prompt:
" if filereadable(expand("~/.vimrc.before.fork")) : if this file exist
"
" if isdirectory(expand("~/.vim/bundle/tabular")) : if thie dir exist

     set background=dark         " Assume a dark background
     " Allow to trigger background
     function! ToggleBG()
         let s:tbg = &background
         " Inversion
         if s:tbg == "dark"
             set background=light
         else
             set background=dark
         endif
     endfunction
     noremap <leader>bg :call ToggleBG()<CR>


    "lcd : local cd
    "%   : the name of the current file
    "%p  : give its full path
    "%:p:h : its dir


    " Some helpers to edit mode
    " http://vimcasts.org/e/14
    cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
    map <leader>ew :e %%
    map <leader>es :sp %%
    map <leader>ev :vsp %%
    map <leader>et :tabe %%

    "set guifont=Andale_Mono:h10,Menlo:h10,Consolas:h10,Courier_New:h10

     let g:spf13_no_autochdir = 1
    if !exists('g:spf13_no_autochdir')
        autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif
        " Always switch to the current file directory
    endif
    set spell
    set history=1000                    " Store a ton of history (default is 20)
    "{ Vimwiki
let g:vimwiki_list = [
                        \{'path': '~/Documents/VimWiki/personal.wiki'},
                        \{'path': '~/Documents/VimWiki/tech.wiki'}
                \]

nmap <leader>tt <Plug>VimwikiToggleListItem
au BufRead,BufNewFile *.wiki set filetype=vimwiki
" :autocmd FileType vimwiki map d :VimwikiMakeDiaryNote
"}
function! ToggleCalendar() "{
  execute ":Calendar"
  if exists("g:calendar_open")
    if g:calendar_open == 1
      execute "q"
      unlet g:calendar_open
    else
      g:calendar_open = 1
    end
  else
    let g:calendar_open = 1
  end
endfunction
:autocmd FileType vimwiki map c :call ToggleCalendar()<CR>
"}
"solarized {
 let g:solarized_termtrans=0
 let g:solarized_degrade=0
 let g:solarized_bold=1
 let g:solarized_underline=1
 let g:solarized_italic=1
 let g:solarized_termcolors=256
 let g:solarized_contrast="normal"
 let g:solarized_visibility="normal"
 let g:solarized_diffmode="normal"
 let g:solarized_hitrail=0
 let g:solarized_menu=1

"}
