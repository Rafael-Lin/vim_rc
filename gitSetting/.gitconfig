[init]
	templatedir = /sdev/user/bin/MSWin32-x86/git
[core]
	editor = nedit
	autocrlf = false
	safecrlf = false
	pager = cat
	filemode = false
	ignorecase = false
[diff]
	tool = kdiff3
[difftool]
	prompt = false
[merge]
	tool = kdiff3
[mergetool]
	prompt = false
[mergetool "kdiff3"]
	path = /home/raflin/.caddir/RHEL6/cadbin/kdiff3
	cmd = /home/raflin/.caddir/RHEL6/cadbin/kdiff3 '$LOCAL' '$REMOTE' '$BASE' -o '$MERGED'
	keepbackup = false
	trustexitcode = false
[color]
	branch = auto
	diff = auto
	status = auto
[color "branch"]
	current = red
	local = blue
	remote = green
[color "diff"]
	frag = magenta bold
	meta = yellow bold
	new = green bold
	old = red bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[apply]
	whitespace = nowarn
[branch]
	autosetuprebase = never
[fetch]
	prune = true
[pull]
	default = current
[push]
	default = current
[alias]
	ai = add --interactive
	alias = config --get-regexp ^alias.
	amend = commit --amend
	assume = update-index --assume-unchanged
	assumeall = !git st -s | awk {print $2} | xargs git assume
	assumed = !git ls-files -v | grep ^h | cut -c 3-
	br = branch
	bra = branch -ra
	branch = branch -ra
	ca = commit --amend
	cb = rev-parse --abbrev-ref HEAD
	caa = commit -a --amend -C HEAD
	ci = commit
	cl = clone
	cm = commit -m
	cma = commit -a -m
	co = checkout
	cp = cherry-pick
	d = diff --word-diff
	dc = diff --cached
	diff = diff --word-diff
	diffr = "!f() { git diff $1^..$1; }; f"
	dl = !git ll -1
	dlc = diff --cached HEAD^
	done = "!f() { git branch | grep $1 | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
	dr = "!f() { git diff -w $1^..$1; }; f"
	empty = !git commit -am\"[empty] Initial commit\" --allow-empty
	f = !git ls-files | grep -i
	filelog = log -u
	fl = log -u
	gr = grep -Ii
	gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
	grep = grep -Ii
	la = !git config -l | grep alias | cut -c 7-
	lap = "!f() { git --git-dir=$1 format-patch -k -1 --stdout $2 | git am -3 -k; }; f"
	lasttag = describe --tags --abbrev=0
	lc = "!f() { git ll $1^..$1; }; f"
	lds = log --pretty=format:'%C(yellow)%h %C(green)%ad%C(red)%d %Creset%s%C(yellow) [%cn]%Creset' --decorate --date=short --graph
	le = log --oneline --decorate
	ll = log --pretty=format:'%C(yellow)%h%C(red)%d %Creset%s%C(yellow) [%cn]%Creset' --decorate --numstat
	lnc = log --pretty=format:'%h %s [%cn]'
	ls = log --pretty=format:'%C(green)%h %C(yellow)[%ad]%C(red)%d %Creset%s%C(yellow) [%cn]%Creset' --decorate --date=relative
	lt = describe --tags --abbrev=0
	ours = "!f() { git co --ours $@ && git add $@; }; f"
	prcontent = "!f() { git fetch && git log --reverse --format=%s origin/${2}..origin/${1}; };f"
	prunetags = fetch --prune origin +refs/tags/*:refs/tags/*
	r = reset
	r1 = reset HEAD^
	r2 = reset HEAD^^
	rem = !git config -l | grep remote.*url | tail -n +2
	rh = reset --hard
	rh1 = reset HEAD^ --hard
	rh2 = reset HEAD^^ --hard
	sa = stash apply
	sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f"
	sl = stash list
	showtracking = for-each-ref --format='%(refname:short)' refs/heads/* | while read b
	spr = "!f() { git fetch origin pull-requests/${1}/from:pr/${1}; }; f"
	squash = "!f(){ git reset --soft HEAD~${1} && git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; };f"
	ss = stash save
	st = status -s
	tagcommit = !sh -c 'git rev-list $0 | head -n 1'
	theirs = "!f() { git co --theirs $@ && git add $@; }; f"
	unassume = update-index --no-assume-unchanged
	unassumeall = !git assumed | xargs git update-index --no-assume-unchanged
	unpushed = !GIT_CURRENT_BRANCH=$(git name-rev --name-only HEAD) && git log origin/$GIT_CURRENT_BRANCH..$GIT_CURRENT_BRANCH --oneline
[user]
	name = Rafael Lin
	email = rafael.lin@asml.com
